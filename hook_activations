#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May 26 19:03:44 2020

@author: aaa
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

import torchvision.models as tmodels
from functools import partial
import collections


#%%
# a dictionary that keeps saving the activations as they come
activations = collections.defaultdict(list)
def save_activation(name, mod, inp, out):
	activations[name].append(out.cpu())

# Registering hooks for all the Conv2d layers
# Note: Hooks are called EVERY TIME the module performs a forward pass. For modules that are
# called repeatedly at different stages of the forward pass (like RELUs), this will save different
# activations. Editing the forward pass code to save activations is the way to go for these cases.
for name, m in model.named_modules():
	if type(m)==nn.Conv2d:
		# partial to assign the layer name to each hook
		m.register_forward_hook(partial(save_activation, name))
#%%
# forward pass through the full dataset
for batch in dataset:
	out = net(batch)
#%% #run some output
  
# concatenate all the outputs we saved to get the the activations for each layer for the whole dataset
activations = {name: torch.cat(outputs, 0) for name, outputs in activations.items()}

# just print out the sizes of the saved activations as a sanity check
for k,v in activations.items():
	print (k, v.size())
    
#%%
def normalize_image(img):
    return (img-np.min(img))/(np.max(img)-np.min(img))
  
  
plt.figure(figsize=(9,7),dpi=250)
for i in range(3):
    plt.subplot(331+3*i)
    if i>1:
        plt.imshow(img[i,0]+20*normalize_image(activations['dec.final.conv2'][i,0].detach().numpy()))    
    else:
        plt.imshow(activations['dec.final.conv2'][i,0].detach().numpy())
    plt.xticks([])
    plt.yticks([])
    plt.subplot(331+3*i+1)
    if i>1:
        plt.imshow(img[i,0]+20*normalize_image(activations['dec.final.conv2'][i,2].detach().numpy()))    
    else:
        plt.imshow(activations['dec.final.conv2'][i,2].detach().numpy())
    plt.xticks([])
    plt.yticks([])
    plt.subplot(331+3*i+2)
    if i>1:
        plt.imshow(img[i,0]+20*normalize_image(activations['dec.final.conv2'][i,3].detach().numpy()))    
    else:
        plt.imshow(activations['dec.final.conv2'][i,3].detach().numpy())
    plt.xticks([])
    plt.yticks([])
plt.tight_layout()
#plt.savefig('../ECCV 2020/activation_ritnetv4_4_class_openeds.png',dpi=250)